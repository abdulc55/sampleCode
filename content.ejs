    <div class="algorithm_content">
        <h3>Move Zeroes</h3>
        <p class="content_section_header">Problem Breakdown:</p>
        <ol class="problem_breakdown_steps">
            <li>First we create a slow pointer. The idea of a slow pointer is that it is pointing at a zero and only increments when we find a non-zero. (NOTE: If the slow pointer is not pointing at a zero then it will increment. Not at all times will it be pointing to a zero)</li>
                <ol class="sample_code_problem_breakdown">
                <li>slowPointer = 0</li>
                </ol>
            <li>We next loop through all the elements.</li>
                <ol class="sample_code_problem_breakdown">
                <li>for i in range(len(nums)):</li>
                </ol>
            <li>As we loop through the elements, we check for the non-zeros.</li>
                <ol class="sample_code_problem_breakdown">
                <li>if nums[i] != 0:</li>
                </ol>
            <li>If we find a non-zero, then we swap it with a zero, where our slow pointer is currently at. We also have to increment our slow pointer.</li>
                <ol class="sample_code_problem_breakdown">
                <li>nums[i], nums[slowPointer] = nums[slowPointer], nums[i] <br> slowPointer += 1</li>
                </ol>
        </ol>

        <p class="content_section_header">Summary:</p>
        <p class="summary_of_problem">This is a two-pointer problem. Loop through the nums array, looking for non-zeros. We make a slow pointer that only increments when we find a non-zero. So we are able to move the zeros to the back of the list and non-zeros to the front. </p>
        
        <p class="content_section_header">Time and Space Complexity:</p>
        <p class="time_space">The time complexity is O(n), we have to visit all the elements</p>
        <p class="time_space">The space complexity is O(1) only constant space is used.</p>
        
        <p class="content_section_header">Python Solution:</p>
        <p>
            slowPointer = 0 <br>
            for i in range(len(nums)): <br>
                if nums[i] != 0: <br>
                    nums[i], nums[slowPointer] = nums[slowPointer], nums[i] <br>
                    slowPointer += 1
        </p>
        
        <p class="content_section_header">Java Solution:</p>
        <p>    
        int slowPointer = 0; <br>
            for(int i = 0; i < nums.length; i++) { <br>
                if (nums[i] != 0) { <br>
                    swap(nums, i, slowPointer); <br>
                    slowPointer++; <br>
                } <br>
            } <br>
        }<br>
    
        public void swap(int[] nums, int a, int b) {<br>
            int temp = nums[a];<br>
            nums[a] = nums[b];<br>
            nums[b] = temp;<br>
        }
       </p>
    </div>
  
